I"P<h1 id="doubly-linked-list">Doubly Linked List</h1>

<p>Single Linked List와는 다르게 Pointer가 2개이다. 다음 Data를 가리키는 pointer, 그 전 Data를 가리키는 pointer가 그것이다.</p>

<p>pointer가 하나 더 있기 때문에 Memory가 2배로 소모되지만 더 flex하게 Data를 다룰 수 있다.(특히 앞에서만 시작했던 linked list와는 달리 뒤에서도 접근이 가능하다.)</p>

<p>웹페이지 forward, backward가 이것으로 구성되어 있다.</p>

<!--more-->

<h1 id="methods">Methods</h1>

<table>
  <thead>
    <tr>
      <th>methods</th>
      <th>Big O notation</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Inserts</td>
      <td>O(1)</td>
    </tr>
    <tr>
      <td>Removal</td>
      <td>O(1)</td>
    </tr>
    <tr>
      <td>Searching</td>
      <td>O(n)</td>
    </tr>
    <tr>
      <td>Access</td>
      <td>O(n)</td>
    </tr>
  </tbody>
</table>

<p>물론 실제로는 searching, access는 O(n/2)지만 규칙에 따라 O(n)이다.</p>

<h1 id="reference">reference</h1>

<p>https://visualgo.net/en/list?slide=1a</p>

<h1 id="my-codes-javascript">My codes (Javascript)</h1>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nx">Node</span><span class="p">{</span>
    <span class="kd">constructor</span><span class="p">(</span><span class="nx">val</span><span class="p">){</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">val</span> <span class="o">=</span> <span class="nx">val</span><span class="p">;</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">next</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">prev</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nx">DoublyLinkedList</span> <span class="p">{</span>
    <span class="kd">constructor</span><span class="p">(){</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">head</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">tail</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">length</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="nx">push</span><span class="p">(</span><span class="nx">val</span><span class="p">){</span>
        <span class="kd">var</span> <span class="nx">newNode</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Node</span><span class="p">(</span><span class="nx">val</span><span class="p">);</span>
        <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">0</span><span class="p">){</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">head</span> <span class="o">=</span> <span class="nx">newNode</span><span class="p">;</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">tail</span> <span class="o">=</span> <span class="nx">newNode</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">tail</span><span class="p">.</span><span class="nx">next</span> <span class="o">=</span> <span class="nx">newNode</span><span class="p">;</span>
            <span class="nx">newNode</span><span class="p">.</span><span class="nx">prev</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">tail</span><span class="p">;</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">tail</span> <span class="o">=</span> <span class="nx">newNode</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="o">++</span><span class="p">;</span>
        <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
    <span class="p">}</span> 
    <span class="nx">pop</span><span class="p">(){</span>
        <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">head</span><span class="p">)</span> <span class="k">return</span> <span class="kc">undefined</span><span class="p">;</span>
        <span class="kd">var</span> <span class="nx">poppedNode</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">tail</span><span class="p">;</span>
        <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">1</span><span class="p">){</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">head</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">tail</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">tail</span> <span class="o">=</span> <span class="nx">poppedNode</span><span class="p">.</span><span class="nx">prev</span><span class="p">;</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">tail</span><span class="p">.</span><span class="nx">next</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
            <span class="nx">poppedNode</span><span class="p">.</span><span class="nx">prev</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="o">--</span><span class="p">;</span>
        <span class="k">return</span> <span class="nx">poppedNode</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="nx">shift</span><span class="p">(){</span>
        <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="kc">undefined</span><span class="p">;</span>
        <span class="kd">var</span> <span class="nx">oldHead</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">head</span><span class="p">;</span>
        <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">1</span><span class="p">){</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">head</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">tail</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
        <span class="p">}</span><span class="k">else</span><span class="p">{</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">head</span> <span class="o">=</span> <span class="nx">oldHead</span><span class="p">.</span><span class="nx">next</span><span class="p">;</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">head</span><span class="p">.</span><span class="nx">prev</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
            <span class="nx">oldHead</span><span class="p">.</span><span class="nx">next</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="o">--</span><span class="p">;</span>
        <span class="k">return</span> <span class="nx">oldHead</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="nx">unshift</span><span class="p">(</span><span class="nx">val</span><span class="p">){</span>
        <span class="kd">var</span> <span class="nx">newNode</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Node</span><span class="p">(</span><span class="nx">val</span><span class="p">);</span>
        <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">head</span> <span class="o">=</span> <span class="nx">newNode</span><span class="p">;</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">tail</span> <span class="o">=</span> <span class="nx">newNode</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">head</span><span class="p">.</span><span class="nx">prev</span> <span class="o">=</span> <span class="nx">newNode</span><span class="p">;</span>
            <span class="nx">newNode</span><span class="p">.</span><span class="nx">next</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">head</span><span class="p">;</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">head</span> <span class="o">=</span> <span class="nx">newNode</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="o">++</span><span class="p">;</span>
        <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="kd">get</span><span class="p">(</span><span class="nx">index</span><span class="p">){</span>
        <span class="k">if</span><span class="p">(</span><span class="nx">index</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="nx">index</span> <span class="o">&gt;=</span> <span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="k">return</span> <span class="kc">null</span><span class="p">;</span>
        <span class="kd">var</span> <span class="nx">count</span><span class="p">,</span> <span class="nx">current</span><span class="p">;</span>
        <span class="k">if</span><span class="p">(</span><span class="nx">index</span> <span class="o">&lt;=</span> <span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="o">/</span><span class="mi">2</span><span class="p">){</span>
            <span class="nx">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
            <span class="nx">current</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">head</span><span class="p">;</span>
            <span class="k">while</span><span class="p">(</span><span class="nx">count</span> <span class="o">!==</span> <span class="nx">index</span><span class="p">){</span>
                <span class="nx">current</span> <span class="o">=</span> <span class="nx">current</span><span class="p">.</span><span class="nx">next</span><span class="p">;</span>
                <span class="nx">count</span><span class="o">++</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="nx">count</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
            <span class="nx">current</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">tail</span><span class="p">;</span>
            <span class="k">while</span><span class="p">(</span><span class="nx">count</span> <span class="o">!==</span> <span class="nx">index</span><span class="p">){</span>
                <span class="nx">current</span> <span class="o">=</span> <span class="nx">current</span><span class="p">.</span><span class="nx">prev</span><span class="p">;</span>
                <span class="nx">count</span><span class="o">--</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="nx">current</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="kd">set</span><span class="p">(</span><span class="nx">index</span><span class="p">,</span> <span class="nx">val</span><span class="p">){</span>
        <span class="kd">var</span> <span class="nx">foundNode</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="nx">index</span><span class="p">);</span>
        <span class="k">if</span><span class="p">(</span><span class="nx">foundNode</span> <span class="o">!=</span> <span class="kc">null</span><span class="p">){</span>
            <span class="nx">foundNode</span><span class="p">.</span><span class="nx">val</span> <span class="o">=</span> <span class="nx">val</span><span class="p">;</span>
            <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="nx">insert</span><span class="p">(</span><span class="nx">index</span><span class="p">,</span> <span class="nx">val</span><span class="p">){</span>
      <span class="k">if</span><span class="p">(</span><span class="nx">index</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">||</span><span class="nx">index</span> <span class="o">&gt;=</span> <span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="p">){</span>
        <span class="k">return</span> <span class="nx">undefinded</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="k">if</span><span class="p">(</span><span class="nx">index</span> <span class="o">===</span> <span class="mi">0</span><span class="p">){</span>
        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">unshift</span><span class="p">(</span><span class="nx">val</span><span class="p">);</span>
      <span class="p">}</span>
      <span class="k">if</span><span class="p">(</span><span class="nx">index</span> <span class="o">===</span> <span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="p">){</span>
        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">val</span><span class="p">);</span>
      <span class="p">}</span>
      <span class="kd">var</span> <span class="nx">newNode</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Node</span><span class="p">(</span><span class="nx">val</span><span class="p">);</span>
      <span class="kd">var</span> <span class="nx">foundNode</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="nx">index</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
      <span class="kd">var</span> <span class="nx">nextNode</span> <span class="o">=</span> <span class="nx">foundNode</span><span class="p">.</span><span class="nx">next</span><span class="p">;</span>
      <span class="nx">foundNode</span><span class="p">.</span><span class="nx">next</span> <span class="o">=</span> <span class="nx">newNode</span><span class="p">;</span>
      <span class="nx">nextNode</span><span class="p">.</span><span class="nx">prev</span> <span class="o">=</span> <span class="nx">newNode</span><span class="p">;</span>
      <span class="nx">newNode</span><span class="p">.</span><span class="nx">next</span> <span class="o">=</span> <span class="nx">nextNode</span><span class="p">;</span>
      <span class="nx">newNode</span><span class="p">.</span><span class="nx">prev</span> <span class="o">=</span> <span class="nx">foundNode</span><span class="p">;</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="o">++</span><span class="p">;</span>
      <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="nx">remove</span><span class="p">(</span><span class="nx">index</span><span class="p">){</span>
      <span class="k">if</span><span class="p">(</span><span class="nx">index</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">||</span><span class="nx">index</span> <span class="o">&gt;=</span> <span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="p">){</span>
        <span class="k">return</span> <span class="nx">undefinded</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="k">if</span><span class="p">(</span><span class="nx">index</span> <span class="o">===</span> <span class="mi">0</span><span class="p">){</span>
        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">shift</span><span class="p">();</span>
      <span class="p">}</span>
      <span class="k">if</span><span class="p">(</span><span class="nx">index</span> <span class="o">===</span> <span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">){</span>
        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">pop</span><span class="p">();</span>
      <span class="p">}</span>
      <span class="kd">var</span> <span class="nx">foundNode</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="nx">index</span><span class="p">);</span>
      <span class="kd">var</span> <span class="nx">nextNode</span> <span class="o">=</span> <span class="nx">foundNode</span><span class="p">.</span><span class="nx">next</span><span class="p">;</span>
      <span class="kd">var</span> <span class="nx">prevNode</span> <span class="o">=</span> <span class="nx">foundNode</span><span class="p">.</span><span class="nx">prev</span><span class="p">;</span>
      <span class="nx">nextNode</span><span class="p">.</span><span class="nx">prev</span> <span class="o">=</span> <span class="nx">prevNode</span><span class="p">;</span>
      <span class="nx">prevNode</span><span class="p">.</span><span class="nx">next</span> <span class="o">=</span> <span class="nx">nextNode</span><span class="p">;</span>
      <span class="nx">foundNode</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="o">--</span><span class="p">;</span>
      <span class="k">return</span> <span class="nx">foundNode</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
:ET