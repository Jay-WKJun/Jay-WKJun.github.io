I"<h1 id="hash-tables">Hash Tables</h1>

<p>특정 Key에 특정 value가 있는 배열구조형태</p>

<p>Hash Table이 중요한 점은 실생활에서도 매우 많이 사용되고 있고 따라서 <em>coding test에 반드시</em> 물어본다는 점에 있다.</p>

<p>그리고 많이 쓰이는 이유는! <strong>보통 HashTable로 처리시간을 크게 단축할 수 있기 때문이다</strong>(공간은 더 차지하지만)</p>

<!--more-->

<h2 id="pros--cons">Pros &amp; Cons</h2>

<table>
  <thead>
    <tr>
      <th>Pros</th>
      <th>Cons</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Fast Lookups</td>
      <td>UnOrdered</td>
    </tr>
    <tr>
      <td>Fast inserts</td>
      <td>Slow Key Iteration</td>
    </tr>
    <tr>
      <td>Flexible keys</td>
      <td>More Space Complexity</td>
    </tr>
  </tbody>
</table>

<p>Key Iteration이 느린 이유는 컴퓨터에 의해 마구잡이로 저장된 Hash들을 메모리 단위에서 모두 찾아가야하기 때문이다.</p>

<p>Hash는 key값의 데이터를 저장해야하기 때문에 다른 데이터 구조보다 더 많은 공간을 소모한다.</p>

<h2 id="hash-function">Hash Function</h2>

<p>만약 내가 ‘Hello’라고 입력하면 Hash function을 통해 알 수 없는 암호같은 문자로 바뀌는데 이것이 Hash function이다.</p>

<p>중요한점은 입력이 같다면 출력이 같다는 점이고 이러한 특성을 <em>‘Idempotent’</em>라고 한다.</p>

<p>이것을 사용하는 이유는 1. key값으로 데이터를 유추할 수 없게하여 보안 강화 2. key값을 통해 특정 데이터를 매우 빨리 찾을 수 있다. 는 점이 장점이다.</p>

<h1 id="methods">Methods</h1>

<table>
  <thead>
    <tr>
      <th>methods</th>
      <th>Big O notation</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>insert</td>
      <td>O(1)</td>
    </tr>
    <tr>
      <td>Lookup</td>
      <td>O(1)</td>
    </tr>
    <tr>
      <td>delete</td>
      <td>O(1)</td>
    </tr>
    <tr>
      <td>search</td>
      <td>O(1)</td>
    </tr>
  </tbody>
</table>

<p>array에서 처럼 index를 수정할 필요가 없어서 insert와 delete가 O(1)이다.</p>

<h1 id="hash-collisions">Hash Collisions</h1>

<p>같은 key에 1개 이상의 value가 들어왔을때, Hash Collision이라 한다.(일종의 Overflow)</p>

<p>Overflow된 value는 Linked list 형태로 같은 key에 종속되어 저장된다.<a href="Overflow 해결방법은 굉장히 많다.">Seperate chaning</a></p>

<p>중요한 점은 Overflow가 되면 reading과 writing의 속도가 O(n/k) = O(n)이 된다는 점이다.(k는 key의 갯수이다.)</p>

<h1 id="map과-set">Map과 Set</h1>

<p>Map은 무작위로 저장하는 것이 아닌 순서대로 저장한다.</p>

<p>Set은 value없이 key만 저장한다.</p>
:ET